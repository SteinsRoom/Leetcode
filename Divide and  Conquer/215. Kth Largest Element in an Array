题目含义：给定一个数组，要求返回第k大的数
思路1：快速排序 归并 (使用内建的sort也非常快，12ms）手动的80多ms
思路2：优化快排：一趟快排后判断中间的值得位置是否等于k-1，根据大小关系调整下一次快排的区间，可以节省排序次数，但实际代码没比全快排快多少
代码：非常慢 80ms 至78ms 最快小于9ms
class Solution {
public:
    /*
    int findKthLargest(vector<int>& nums, int k) {
        //QuickSort(nums,0,nums.size()-1);
        //return nums[k-1];
        int left = 0,right = nums.size()-1;
        while(true){
            int pos = partition(nums,left,right);
            if(pos<k-1) left = pos+1;
            else if(pos>k-1) right = pos-1;
            else return nums[pos];
        }
    }
    void QuickSort(vector<int>& nums,int start,int end){
        if(start >=end) return;
        int key = nums[start];
        int i = start,j = end;
        while(i!=j){
            while(i<j && nums[j]<=key) --j;
            swap(nums[i],nums[j]);
            while(i<j && nums[i]>=key) ++i;
            swap(nums[i],nums[j]);
        }
        QuickSort(nums,start,i-1);
        QuickSort(nums,i+1,end);
    }
    int partition(vector<int>& nums,int start,int end){
        int key = nums[start];
        int i = start+1;
        int j = end; 
        while(i<=j){
            if(nums[i]<=key && nums[j]>=key) swap(nums[i],nums[j]);
            if(nums[i]>=key) ++i;
            if(nums[j]<=key) --j;
        }
        swap(nums[start],nums[j]);
        return j;
    }*/
}

思路3：使用内建的优先级队列，速度很快，12ms
代码：
int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int> pq(nums.begin(), nums.end());
        for (int i = 0; i < k - 1; i++)
            pq.pop(); 
        return pq.top();
    }
