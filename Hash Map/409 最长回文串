题目：给定一个字符串，找出利用字符串中字母可以组成的最长回文串的长度。
思路1：利用unordered_map存储字符串中每种字符串出现的次数，对于出现次数为偶数的直接相加，对于奇数次数的选择最长的加入
思路2：考虑从整个字符串中排除不能作为回文串的字符。遍历可能出现的每种字符，统计次数为奇数的字符种类数（可以用count + &1操作），最后从总长度中减去0或者种类数减一
代码：
思路2： 12ms 较慢  最快6ms
class Solution {
public:
    int longestPalindrome(string s) {
        int odd = 0;
        for(char a = 'A';a<='z';++a)
            odd+=count(s.begin(),s.end(),a)&1;
        return s.length() - max(0,odd-1);
    }
};

思路1：7ms 比较快
class Solution {
public:
    int longestPalindrome(string s) {
        unordered_map<char,int> numap;
        for(auto i:s)
            numap[i]++;
        int res = 0;
        bool idodd = false;
        for(auto it = numap.begin();it!=numap.end();++it){
            if((*it).second & 0x1){
                idodd = true;
                res+=(*it).second-1;
            }else{
                res+=(*it).second;
            }
        
        }
        return idodd?res+1:res;
    }
};
