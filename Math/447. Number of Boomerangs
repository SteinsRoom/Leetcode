题目含义：
给定一个含有二维坐标的点集，从点集中取出三个点组成一个集合，使该集合中后两个点与第一个点的距离相等（考虑顺序），要求返回共有多少种组合。
思路：
遍历点集，对于遍历到的每一个点，计算点集中其他点与该点的距离，将其存入map中，对于map中出现次数大于1的点计算组合的个数，最后将总次数返回。
代码：
class Solution {
public:
    int numberOfBoomerangs(vector<pair<int, int>>& points) {
        unordered_map<int,int> mp;
        int result = 0;
        int size = points.size();
        for(int i = 0;i<size;i++){
            for(int j = 0;j<size;j++){
                if(j == i) continue;
                int dis = Distance(points[i],points[j]);
                mp[dis]++;
            }
            for(auto it = mp.begin();it!=mp.end();it++){
                if(it->second >1){
                    result+=it->second *(it->second-1);
                }
            }
            mp.clear();
        }
        return result;
    }
    int Distance(pair<int,int>& p1,pair<int,int>& p2){
        int x = p1.first-p2.first;
        int y = p1.second - p2.second;
        return x*x+y*y;
    }
};
