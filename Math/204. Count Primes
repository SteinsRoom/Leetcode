题目含义：
给定一个数，求所有小与n的质数的个数
思路1：
直接用遍历比sqrt（n）小的数的方法会超时，改进，用vectot记录找到的素数，将算法改进为判断能否被sqrt（n）小的质数整除，
代码： 速度很慢
class Solution {
public:
    int countPrimes(int n) {
        int count = 0;
        for(int i = 1;i<n;i++){
            if(IsPrime(i)){
                count++;
                prime_vec.push_back(i);
            }
        }
        return count;
    }
    bool IsPrime(int n){
        if(n<2) return false;
        if(n == 2) return true;
        int k = std::sqrt(n);
        int size = prime_vec.size();
        for(int i = 0;i<size;i++){
            if(prime_vec[i]>k) break;
            if(n%prime_vec[i] == 0) return false;
        }
        return true;
    }
    vector<int> prime_vec;
};

思路2：
维护一张从1-n的vector，下标对应的是该数是否是质数。从2开始遍历，每发现一个指数就将该质数的倍数对应的bool值都设为false。
代码：
class Solution {
public:
    int countPrimes(int n) {
        vector<int> vec(n,true);
        int k = std::sqrt(n);
        int count = 0;
        for(int i = 2;i<n;i++){
            if(vec[i-1]){  //注意下标大小
                count++;
                if(i>k) continue; //对于大于k的数只需统计个数
                for(int j = i;i*j<n;j++){ //排除当前值的倍数
                    vec[i*j-1] = false;
                }
            }
        }
        return count;
    }
};
