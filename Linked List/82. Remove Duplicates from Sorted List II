思路：创建头指针，设置前置节点指针与当前指针，当前指针遍历每一个节点，如果当前节点与下一节点的val值相同，删除所有与val值相同的节点。需要注意
     结尾的判断情况，如果遍历到最后一个节点，节点后没有其他节点且该节点需要被删除则pre节点的next置空（= p->next），如果遍历到最后一个节点，节点值
     与val不同则pre = p继续遍历。
代码：时间已最优
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head == NULL || head->next == NULL) return head;
        ListNode *newhead = new ListNode(INT_MIN);
        newhead->next = head;
        ListNode *p = head,*pre = newhead;
        while(p->next != NULL){
            if(p->val == p->next->val){
                int val = p->val;
                while(p->next!=NULL && p->val == val){
                    p = p->next;
                }
                if(p->next == NULL && p->val == val){
                    pre->next = p->next;
                }else {
                    pre->next = p;
                }                
            }else{
                pre = pre->next;
                p = p->next;
            }
        }
        return newhead->next;
    }
};

更简洁：
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if (head == NULL || head->next == NULL) return head;
        ListNode *trav = new ListNode(0);
        trav->next = head;
        head = trav;
        while (trav->next != NULL && trav->next->next != NULL)
        {
            if (trav->next->val == trav->next->next->val)
            {
                int val = trav->next->val;
                while (trav->next != NULL && trav->next->val == val)
                    trav->next = trav->next->next;
            }
            else
                trav = trav->next;
        }
        return head->next;
    }
};
