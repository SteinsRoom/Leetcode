题目含义：给定一个数组，要求找出能包含所有该数组中出现次数最多的数字的子序列的最小长度。
思路：
定义一个map用于存储每个数字与其第一次出现的位置下标，用于后面方便计算长度。使用一个int数组存储每个数字的出现次数。定义int变量存储出现次数最多的数字的次数以及
包含所有该数字的最小序列长度。
遍历数组中每个数字：
1.如果不能在map中检索到则加入map，更新数字出现次数，否则仅更新出现次数。
2.对于每个数字，判断该数字的出现次数是否大于当前的最大数字出现次数
 a.如果大于，更新最大数字出现次数与最小距离
 b.如果等于，计算其子序列距离并与当前最小距离比较，如果小于则更新最大数字出现次数与最小距离
 c其余情况均跳出循环继续
 
 代码：已最优 33ms
 class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        if(nums.size()<2) return nums.size();
        int count[50000] = {0};
        map<int,int> num2index;
        int maxcount = 0,mindis = 0;
        for(int i  =0;i<nums.size();++i){
            if(num2index.count(nums[i]) == 0){
                num2index[nums[i]] = i;
                count[nums[i]]++;
            }else{
                count[nums[i]]++;
            }
            if(count[nums[i]]>maxcount){
                maxcount = count[nums[i]];
                mindis  = i - num2index[nums[i]]+1;
            }else if(count[nums[i]]==maxcount){
                int dis = i - num2index[nums[i]]+1;
                if(dis<mindis){
                    maxcount = count[nums[i]];
                    mindis  = dis;
                }
            }                        
        } 
        return mindis;
    }
};
