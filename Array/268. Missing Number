题目含义：
给定一个数组，大小为n，里面本应由0~n的数组成，现在少了一个，要求找到这个丢失的数。要求线性时间复杂度和常数空间复杂度。
思路：
利用等差数列求和公式，对0~n与数列中的数求和作差得到丢失的数。
代码：
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int size = nums.size(),he = 0;
        for(int i = 0;i<size;i++){
            he+=nums[i];
        }
        int k = (size)*(size+1)/2;
        return k - he;
    }
};


更快：速度差不多？ 与运算
1.XOR
public int missingNumber(int[] nums) { //xor
    int res = nums.length;
    for(int i=0; i<nums.length; i++){
        res ^= i;
        res ^= nums[i];
    }
    return res;
}
2.SUM
public int missingNumber(int[] nums) { //sum
    int len = nums.length;
    int sum = (0+len)*(len+1)/2;
    for(int i=0; i<len; i++)
        sum-=nums[i];
    return sum;
}
3.Binary Search
public int missingNumber(int[] nums) { //binary search
    Arrays.sort(nums);
    int left = 0, right = nums.length, mid= (left + right)/2;
    while(left<right){
        mid = (left + right)/2;
        if(nums[mid]>mid) right = mid;
        else left = mid+1;
    }
    return left;
}
Summary:
If the array is in order, I prefer Binary Search method. Otherwise, the XOR method is better.
