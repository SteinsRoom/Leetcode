思路：
  首先判断是否为空，空则返回空；
  然后判断头元素是否是要删除节点，是则一直删除直至节点为空或者不是要删除的节点。
  新建指针开始遍历，如果下一节点为要删除，下一节点为下一节点的下一节点，不是则调到下一节点。



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    /**
     * @param head a ListNode
     * @param val an integer
     * @return a ListNode
     */
    ListNode *removeElements(ListNode *head, int val) {
        // Write your code here
        if(head == NULL)
        return NULL;
        while(head->val == val){    
            head= head->next;
            if(head == NULL)
            return NULL;
        };
        auto ptr = head;
        while(ptr->next!=NULL){
            if(ptr->next->val == val){
                ptr->next = ptr->next->next;
                //ptr = ptr->next;
            }else{
                ptr = ptr->next;
            }
        }
        return head;
        
    }
};
