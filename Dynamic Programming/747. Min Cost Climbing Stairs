思路：totalcost[i] = min((totalcost[i-1]+cost[i-1]),(totalcost[i-2]+cost[i-2]));
      totalcost[i] = cost[i] +min(totalcost[i+1],totalcost[i+2])
代码1：超时
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int size = cost.size();
        return min(mincost(cost,0,size),mincost(cost,1,size));
    }
    int mincost(vector<int>& cost,int step,int& size){
        if(step<size){
            return cost[step]+min(mincost(cost,step+1,size),mincost(cost,step+2,size));
        }
        return 0;
    }
};

代码2：用第二个递推公式（状态转移方程？） 13ms
class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int size = cost.size();
        int totalcost_1 = cost[0];
        int totalcost_2 = cost[1];
        int totalcost_3 = 0;
        for(int i = 2;i<size;++i){
            totalcost_3 = min(totalcost_1,totalcost_2)+cost[i];
            totalcost_1 = totalcost_2;
            totalcost_2 = totalcost_3;

        }
        return min(totalcost_1,totalcost_2);
    }
};

