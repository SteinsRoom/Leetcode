
思路1：O(n2)
dp[i] = max(dp[0]——dp[j])+1; j属于0——i-1,dp[i]代表以i结尾的最大递增子序列长度。最后返回的结果是dp数组中的最大值。
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(nums.empty()) return 0;
        int size = static_cast<int>(nums.size());
        vector<int> dp(size,0);
        dp[0] = 1;
        int res = 1;
        for(int i = 1;i<size;++i){
            int max = 1;
            for(int j = 0;j<i;++j){
                if(nums[j]<nums[i]){
                    if(dp[j]+1>max)
                        max = dp[j]+1;
                }
            }
            dp[i] = max;
            if(max>res)
                res = max;
        }
        return res;
    }
};

O(nlogn)
维护一个dp 当前元素小于队头则替换队头，大于队尾则插入，等于队头队尾不处理 位于二者之间则用二分查找找到第一个不小于该值的数，并将其替换.注意这里的二分查找
不同于通常的二分查找，需要单独去记忆。这里的策略是mid小于target则low+1，否则将high置为mid。若为不大于则换为大于，high-1，否则low为mid

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(nums.empty()) return 0;
        int size = static_cast<int>(nums.size());
        //sort(nums.begin(),nums.end());
        vector<int> dp;
        dp.push_back(nums[0]);
        for(int i = 1;i<size;++i){
            if(nums[i]<dp[0]){
                dp[0] = nums[i];
            }else if(nums[i]>dp[dp.size()-1]){
                dp.push_back(nums[i]);
            }else if((nums[i] == dp[0])   || (nums[i] == dp[dp.size()-1])){
                continue;
            }else{
                int low = 0,high = dp.size()-1;
                while(low<high){
                    int mid = low+(high-low)/2;
                    if(dp[mid]<nums[i]){
                        low = mid+1;
                    }else{
                        high = mid;
                    }
                }
                    dp[high] = nums[i];
            }
        }
        return dp.size();
    }
};


