冒泡排序：
    思路：最原始的冒泡排序需要排序n趟，每一趟中需要从末尾或开头开始两两比较将最小的排到前面或者最大的排到后面，每一趟中前n或后n项已有序不需要在排序。
    代码：void sortIntegers(vector<int>& A) {
        // Write your code here
        for(int i =0; i<A.size();i++){
          for(int j=A.size()-1;j>i;j--){
            if(A[j-1]>A[j]){
              int temp = A[j-1];
              A[j-1] = A[j];
              A[j]=temp;  //swap(A[j],A[j-1]);
            }
          }
        }
    }
  
改进的冒泡排序：
    思路：改进无序区中的有序元素也需要两两比较，同时对于内层循环，设置标志位pos=n，如果在该层循环运行完后仍然值不变说明已经排好序可以跳出循环。
         进一步对于无序区中的数据因为是两两比较若其中某次比较后不再发生交换则说明在此之后的数据已经排好序，而不需要再对该部分数据进行比较，
         用pos记录该位置
    void sortIntegers(vector<int>& A) {
        // Write your code here
        int pos=0;
        int n = A.size();
        while(pos!=n){
            int bound = pos;
            pos = n;//第二部改进
            for(int i = n-1;i>bound;i--){
                if(A[i-1]>A[i]){
                    int temp = A[i-1];
                    A[i-1]=A[i];
                    A[i]=temp;
                    pos = i;//设置标志位，仅需对[bound,n-1]的数据进行两两比较
                }
            }
        }
    }
    
    直接插入排序：
    思路：从前面或后面排序均可，每执行一次产生一个有序数，每次从无序序列中取出一个数作为key进行比较，为提高效率需要移位时将前面的数向后挪一位
         （对于从前面排序的来说），执行n-1次。以上为原始思路，改进为循环从i=1处开始，每次首先判断是否小于前一元素，若小于则不需要继续比较，否则
         针对前面的有序元素进行遍历，将比key大的元素依次后移，最后将j+1的值赋值成key。
         
    代码： 
    void sortIntegers(vector<int>& A) {
    // Write your code here
    int n = A.size();
    int i,j;
    for( i = 1;i<n;i++){
        if(A[i]<A[i-1]){
            int key = A[i];
            for(j = i-1;j>=0&&A[j]>key;j--){
                A[j+1]= A[j];
            }
            A[j+1] = key;
        }
    }
    
    
    
    希尔排序：
       思路：与直接插入排序类似，每次将元素集分为d组，每次循环将d/2，针对间隔为d的元素进行直接插入排序，以d元素为无序序列中的初始元素，元素间间隔为d，
            进行直接插入排序，思路与上面类似。
       代码：
        void sortIntegers(vector<int>& A) {
    // Write your code here
    int n = A.size();
    int i,j,d;
    for(d=n/2;d>=1;d/=2){
        for(i=d;i<n;i+=d){
            if(A[i]<A[i-d]){
                int key = A[i];
                for(j = i-d;j>=0 && A[j]>key;j-=d){
                    A[j+d]=A[j];
                }
                A[j+d]=key;
            }
        }
    }
