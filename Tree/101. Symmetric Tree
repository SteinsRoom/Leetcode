思路1：失败  中序遍历一次，判断得到数组是否对称。  可能有1 2 3 3 2的情况（此为层序），并不对称但中序遍历对称。
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        vector<int> temp;
        helper(root,temp);
        int left = 0,right = temp.size()-1;
        while(left<right){
            if(temp[left] == temp[right]) {
                ++left;
                --right;
                continue;
            }else{return false;}
        }
        return true;
        
    }
    void helper(TreeNode* root,vector<int>& temp){
        if(!root) return ;
        if(root->left) helper(root->left,temp);
        temp.push_back(root->val);
        if(root->right) helper(root->right,temp);
    }
};
思路2：失败
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        vector<int> templeft,tempright;
        helperleft(root,templeft);
        helperright(root,tempright);
        int size = templeft.size();
        for(int i = 0;i<size;++i){
            if(templeft[i] == tempright[i]) continue;
            else return false;              
        }
        return true;
        
    }
    void helperleft(TreeNode* root,vector<int>& temp){
        if(!root) return ;
        temp.push_back(root->val);
        if(root->left) helperleft(root->left,temp); 
        if(root->right) helperleft(root->right,temp);
    }
    
    void helperright(TreeNode* root,vector<int>& temp){
        if(!root) return ;
        temp.push_back(root->val);
        if(root->right) helperright(root->right,temp);
        if(root->left) helperright(root->left,temp);
        
    }
};
