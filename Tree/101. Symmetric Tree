思路1：失败  中序遍历一次，判断得到数组是否对称。  可能有1 2 3 3 2的情况（此为层序），并不对称但中序遍历对称。
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        vector<int> temp;
        helper(root,temp);
        int left = 0,right = temp.size()-1;
        while(left<right){
            if(temp[left] == temp[right]) {
                ++left;
                --right;
                continue;
            }else{return false;}
        }
        return true;
        
    }
    void helper(TreeNode* root,vector<int>& temp){
        if(!root) return ;
        if(root->left) helper(root->left,temp);
        temp.push_back(root->val);
        if(root->right) helper(root->right,temp);
    }
};
思路2：失败 想用左右两边的中序遍历作比较
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        vector<int> templeft,tempright;
        helperleft(root,templeft);
        helperright(root,tempright);
        int size = templeft.size();
        for(int i = 0;i<size;++i){
            if(templeft[i] == tempright[i]) continue;
            else return false;              
        }
        return true;
        
    }
    void helperleft(TreeNode* root,vector<int>& temp){
        if(!root) return ;
        temp.push_back(root->val);
        if(root->left) helperleft(root->left,temp); 
        if(root->right) helperleft(root->right,temp);
    }
    
    void helperright(TreeNode* root,vector<int>& temp){
        if(!root) return ;
        temp.push_back(root->val);
        if(root->right) helperright(root->right,temp);
        if(root->left) helperright(root->left,temp);
        
    }
};

思路3：上述两个思路的错误之处在于忘记唯一确定一颗二叉树需要中序加前序或者后序，所以同时获得左右两颗子树的两种遍历再进行判断可以得出
代码：6ms   时间复杂度：O（N）
            空间复杂度 O（N）
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root)return true;
        vector<int> templ,tempr;
        inorderl(root->left,templ);
        preorderl(root->left,templ);
        inorderr(root->right,tempr);
        preorderr(root->right,tempr);
        int sizel = templ.size();
        int sizer = tempr.size();
        //return sizel == sizer;
        if(sizel!=sizer) return false;
        for(int i = 0;i<sizer;++i){
            if(templ[i]==tempr[i])continue;
            else return false;
        }
        return true;
    }
    void inorderl(TreeNode* root,vector<int>& temp){
        if(!root) return;
        if(root->left) inorderl(root->left,temp);
        temp.push_back(root->val);
        if(root->right) inorderl(root->right,temp);
    }
    void preorderl(TreeNode* root,vector<int>& temp){
        if(!root) return;
        temp.push_back(root->val);
        if(root->left) preorderl(root->left,temp);   
        if(root->right) preorderl(root->right,temp);
    }
    void inorderr(TreeNode* root,vector<int>& temp){
        if(!root) return;
        if(root->right) inorderr(root->right,temp);
        temp.push_back(root->val);
        if(root->left) inorderr(root->left,temp); 
    }
    void preorderr(TreeNode* root,vector<int>& temp){
        if(!root) return;
        temp.push_back(root->val);
        if(root->right) preorderr(root->right,temp);
        if(root->left) preorderr(root->left,temp);         
    }
};

思路4：利用DFS直接一次遍历过程中判断,迭代解法
      可以优化的点：判断两个节点是否都不为空h或者都为空：
                   if（node1 == NULL || node2 == NULL） return node1 == node2；
代码：6ms 优化后的也是6ms/3ms(最快)
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root)return true;
        return DFS(root->left,root->right);
        
    }
    bool DFS(TreeNode* left,TreeNode* right){
        if(left == NULL && right == NULL) return true;
        else if(!(left != NULL && right != NULL)) return false;
        else{
            return (left->val == right->val) && DFS(left->left,right->right) && DFS(left->right,right->left);
        }
    }
};
