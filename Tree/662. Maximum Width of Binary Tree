思路1：
按层序遍历便利每一层，对于没有元素的地方补充NULL，遍历一层的过程中更新left与right的大小，差值与max比较。但是有全右单列树的情况会超出内存，所以改用别的
算法，代码没有保存。
思路2：
利用节点的坐标，对于坐标为i的节点，左右孩子分别是2i和2i+1,利用两个queue分别存储层序遍历不为空的节点和对应的节点编号。每次判断queue不为空后处理该层的index
left right分别为index的最左最右值，差值与max进行比较，然后层序遍历获得下一层的节点与编号。
代码：6ms 多次提交也可到3ms（最快）
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(root == NULL) return 0;
        queue<TreeNode*> que;
        queue<int> index;
        que.push(root);
        index.push(1);
        int max = INT_MIN;
        //bool end = false;
        while(!que.empty()){
            int size = que.size();
            int left = index.front(),right = index.back();
            int width = right>left?right-left+1:1;
            if(width>max) max = width;
            for(int i = 0;i<size;++i ){
                if(que.front()->left){
                    que.push(que.front()->left);
                    index.push(2*index.front());
                    }
                if(que.front()->right){
                    que.push(que.front()->right);
                    index.push(2*index.front()+1);  
                }
                que.pop(); 
                index.pop();
            }
        }
        return max;
    }
};

思路3：DFS递归
代码1：6ms
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        vector<int> lefts; // left most nodes at each level;
        return dfs(root, 1, 0, lefts);
    }
private:
    int dfs(TreeNode* n, int id, int d, vector<int>& lefts) { // d : depth
        if (!n) return 0;
        if (d >= lefts.size()) lefts.push_back(id);  // add left most node
        return max({id + 1 - lefts[d], dfs(n->left, id * 2, d + 1, lefts), dfs(n->right, id * 2 + 1, d + 1, lefts)});
    }
};
等效写法：
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        vector<int> lefts; // left most nodes at each level;
        int maxwidth = 0;
        dfs(root, 1, 0, lefts, maxwidth);
        return maxwidth;
    }
private:
    void dfs(TreeNode* node, int id, int depth, vector<int>& lefts, int& maxwidth) {
        if (!node) return;
        if (depth >= lefts.size()) lefts.push_back(id);  // add left most node
        maxwidth = max(maxwidth, id + 1 - lefts[depth]);
        dfs(node->left, id * 2, depth + 1, lefts, maxwidth);
        dfs(node->right, id * 2 + 1, depth + 1, lefts, maxwidth);
    }
};
思路4：BFS递归
代码：
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if (!root) return 0;
        int max = 0;
        queue<pair<TreeNode*, int>> q;
        q.push(pair<TreeNode*, int>(root, 1));
        while (!q.empty()) {
            int l = q.front().second, r = l; // right started same as left
            for (int i = 0, n = q.size(); i < n; i++) {
                TreeNode* node = q.front().first;
                r = q.front().second;
                q.pop();
                if (node->left) q.push(pair<TreeNode*, int>(node->left, r * 2));
                if (node->right) q.push(pair<TreeNode*, int>(node->right, r * 2 + 1));
            }
            max = std::max(max, r + 1 - l);
        }
        return max;
    }
};
