思路1：使用递归，速度很慢  73ms
构造递归函数helper，传入每次处理的边界，在边界内确定root的index，调整边界递归确定root的左右节点，最后返回
代码：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        int size = nums.size();
        TreeNode* res = helper(0,size-1,nums);
        return res;
    }
    TreeNode* helper(int leftbound,int rightbound,vector<int>& nums){
        if(leftbound>rightbound) return NULL;
        int minnum = INT_MIN,rootindex = 0;
        for(int i = leftbound;i<=rightbound;++i){
            if(nums[i]>minnum) {minnum = nums[i],rootindex = i;}
        }
        TreeNode * root = new TreeNode(nums[rootindex]);
        root->left = helper(leftbound,rootindex-1,nums);
        root->right = helper(rootindex+1,rightbound,nums);
        return root;
    }
    
};

思路2：
利用vector来存储节点，节点按照从大到小的顺序存储
从左到右扫描数组，对每一个节点，依次弹出所有vector中比它小的节点，将最后一个弹出的节点设为其左孩子（其余弹出的节点已于该节点建立联系），如此时vector
不为空说明还有比它更大的节点，当前节点应为它的右孩子，将节点压入vector中，遍历结束后返回vector中最左面的值。
代码：59ms
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        vector<TreeNode*> sta;
        int size = nums.size();
        for(int i = 0;i<size;++i){
            TreeNode* cur = new TreeNode(nums[i]);
            while(!sta.empty() && sta.back()->val<nums[i]){    
                cur->left = sta.back();
                sta.pop_back();
            }
            if(!sta.empty()){
                sta.back()->right = cur;
            }
            sta.push_back(cur);
        }
        return sta.front();
    }   
};
