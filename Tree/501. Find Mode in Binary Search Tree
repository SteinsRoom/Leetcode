题目含义：给定一颗二叉排序树，要求找出所有树中出现次数最多的元素，若有多个次数最多的元素以其输出不计次序。
思路：使用中序遍历得到树的序列/////排序后///  对得到的vector进行遍历处理，每次与前一个元素比较看是否相等，相等则次数加一直至遇见不同的元素，与当前的max进行比较
并更新max和res，最后返回res。注意这里代码中一开始没有考虑遍历最后一个元素后就跳出循环没有处理。
代码：13ms 最快

时间复杂度：O(N)
空间复杂度：O(N)
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> findMode(TreeNode* root) {
        vector<int> res,temp;
        if(root == NULL) return res;
        if(root->left == NULL && root->right == NULL) {res.push_back(root->val);return res;}
        helper(root,temp);
        //sort(temp.begin(),temp.end());
        int size = temp.size();
        int max = 1,sum = 1;
        for(int i = 1;i<=size;++i){
            if(temp[i] == temp[i-1]){
                sum++;
                continue;
            }
             if(sum>max){
                res.clear();
                res.push_back(temp[i-1]);
                 max = sum;
                sum=1;
             }else if(sum  == max){
                res.push_back(temp[i-1]);
                sum=1;
             }else{
                sum =1;
             }
        }
       
        return res;
    }
    void helper(TreeNode* root,vector<int>& temp){
        if(root== NULL) return;
        if(root->left) helper(root->left,temp);
        temp.push_back(root->val);
        if(root->right) helper(root->right,temp);
    }
};

思路2：改进空间复杂度为O(1)

