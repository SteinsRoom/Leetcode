思路：记下子树头结点的值，在源树中遍历寻找值相同的节点，调用check函数判断是否相等。
代码：有问题，未找到原因
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        int key = t->val;
        TreeNode* p1 = s;
        TreeNode* p2 = NULL;
        bool res = false;
        while(p1){
            p2 = p1->left;
            if(p2){
                while(p2->right!=NULL && p2->right != p1) p2 = p2->right;
                if(p2->right == NULL){
                    p2->right = p1;
                    p1 = p1->left;
                    continue;
                }else{
                    p2->right = NULL;
                }
            }
            if(p1->val == key) {
                res = checkissubtree(p1,t);
                if(res) return true;
                //return true;
            } 
            p1 = p1->right;
        }
       return res;
    }
    bool checkissubtree(TreeNode* origin,TreeNode* newtree){
        if(origin == NULL && newtree == NULL) return true;
        if(origin == NULL || newtree == NULL) return false;
        if(origin->val == newtree->val){
            return checkissubtree(origin->left,newtree->left) && checkissubtree(origin->right,newtree->right); 
        }else{
            return false;
        }
    }
};

代码：换一种遍历方式 
22ms 26ms 大多数，较快
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if(s == NULL && t == NULL) return true;
        if(s == NULL || t == NULL) return false;
        int key = t->val;
        stack<TreeNode*> sta;
        bool res = false;
        while(s || !sta.empty()){
            if(s){
                if(s->val == key){
                    res = checkissubtree(s,t);
                    if(res) return true;
                }
                sta.push(s->right);
                s = s->left;
            }else{
                    s = sta.top();
                    sta.pop();
            }
        }
        return res;
    }
    bool checkissubtree(TreeNode* origin,TreeNode* newtree){
        if(origin == NULL && newtree == NULL) return true;
        if(origin == NULL || newtree == NULL) return false;
        if(origin->val == newtree->val){
            return checkissubtree(origin->left,newtree->left) && checkissubtree(origin->right,newtree->right); 
        }else{
            return false;
        }
    }
};

更优思路：
先计算树t的深度，然后遍历源树寻找深度相同的节点，然后只对这些节点进行check操作。
22ms 23ms 32ms 解答说最快能到19ms 击败99.9%
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if(s == NULL && t == NULL) return true;
        if(s == NULL || t == NULL) return false;
        vector<TreeNode*> nodes;
        bool res = false;
        int temp = -1;
        int tdepth = GetDepth(t,nodes,temp);
        int maxdepth = GetDepth(s,nodes,tdepth);
        for(auto cur:nodes){
            res = checkissubtree(cur,t);
            if(res) return true;
        }
        return res;
        
    }
    int GetDepth(TreeNode* root,vector<TreeNode*>& nodes,int& targetdepth){
        if(!root) return 0;
        int currentdepth = 1+ max(GetDepth(root->left,nodes,targetdepth),GetDepth(root->right,nodes,targetdepth));
        if(currentdepth == targetdepth) nodes.push_back(root);
        return currentdepth;
    }
    bool checkissubtree(TreeNode* origin,TreeNode* newtree){
        if(origin == NULL && newtree == NULL) return true;
        if(origin == NULL || newtree == NULL) return false;
        if(origin->val == newtree->val){
            return checkissubtree(origin->left,newtree->left) && checkissubtree(origin->right,newtree->right); 
        }else{
            return false;
        }
    }
};

精简代码：
22ms
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if(!s && !t) return true;
        if(!s || !t ) return false;
        vector<TreeNode*> nodes;
        bool res = false;
        int temp = -1;
        int tdepth = GetDepth(t,nodes,temp);
        GetDepth(s,nodes,tdepth);
        for(auto cur:nodes){
            if(checkissubtree(cur,t)) return true;
        }
        return res;
        
    }
    int GetDepth(TreeNode* root,vector<TreeNode*>& nodes,int& targetdepth){
        if(!root) return 0;
        int currentdepth = 1+ max(GetDepth(root->left,nodes,targetdepth),GetDepth(root->right,nodes,targetdepth));
        if(currentdepth == targetdepth) nodes.push_back(root);
        return currentdepth;
    }
    bool checkissubtree(TreeNode* origin,TreeNode* newtree){
        if(origin == NULL && newtree == NULL) return true;
        if(origin == NULL || newtree == NULL || origin->val != newtree->val) return false;
        return checkissubtree(origin->left,newtree->left) && checkissubtree(origin->right,newtree->right); 
    }
};
