前序遍历：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        /*if(root == NULL) return result;
        result.push_back(root->val);
        if(root->left) preorderTraversal(root->left);
        if(root->right) preorderTraversal(root->right);
        return result;*/
        if(root == NULL) return result;
        stack<TreeNode*> S;
        while(true){
            getdeepleft(root,S);
            if(S.empty()) break;
            root = S.top();
            S.pop();
        }
        return result;
}
    void getdeepleft(TreeNode* x,stack<TreeNode*> & S){
        while(x){
            if(x->right) S.push(x->right);
            result.push_back(x->val);
            x = x->left;
        }
    }
private:
    vector<int> result;
        
};


后序：
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        post(root);
        return res;
        /*vector<int> res;
        if(root == NULL) return res;
        stack<TreeNode*> S;
        TreeNode* cur = root;
        TreeNode* lastnode = NULL;
        while(cur != NULL || !S.empty()){
            if(cur){
                S.push(cur);
                cur = cur->left;
            }else{
                cur = S.top();
                if((cur->right == NULL)|| (cur->right == lastnode)){
                    res.push_back(cur->val);
                    lastnode = cur;
                    S.pop();
                    cur = NULL;
                }else{
                    cur = cur->right;
                } 
            }
            /*
            while(cur){
                S.push(cur);
                cur = cur->left;
            }
            cur = S.top();
            if((cur->right == NULL)|| (cur->right == lastnode)){
                    res.push_back(cur->val);
                    lastnode = cur;
                    S.pop();
                    cur = NULL;
            }else{
                    cur = cur->right;
            } */
}
    void post(TreeNode* root){
        if(root == NULL) return;
        if(root->left)post(root->left);
        if(root->right)post(root->right);
        res.push_back(root->val); 
    }
private:
vector<int> res;

};
