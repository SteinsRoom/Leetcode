题目含义：给定一个序列代表柱子的高度，现在想其中倒水，求能存储的水的体积最大值
思路：
对于序列中每个元素求出其左侧最大值与右侧最大值，如果两者之中的较小值减去元素本身对应的高度大于0则该值即为当前柱子所能存储的水的体积的最大值，对其求和。
求每一行的左侧（右侧）最大值的方法：
左侧：最左侧对应值为0，从第二个元素开始比较前一元素的值与存储的max值的大小，如果大于则更新max值，然后当前元素左侧的最大值即为max，记录下来。
右侧：最右侧为0，从后向前遍历，找到最大值。
代码：
class Solution {
public:
    int trap(vector<int>& height) {
        int size = height.size();
        vector<int> leftmax(size,0);
        vector<int> rightmax(size,0);
        int max = 0;
        if(height.size()<2) return 0;
        for(int i = 1;i < height.size();++i){
            if(height[i-1]>max) max = height[i-1];
            leftmax[i]=max;
        }
        max = 0;
        for(int i=height.size()-2;i >=0;--i){
            if(height[i+1]>max) max = height[i+1];
            rightmax[i]=max;
        }
        
        int res = 0;
        for(int i = 1;i<height.size()-1;++i){
            int tmp = getmin(leftmax[i],rightmax[i]) - height[i];
            if(tmp>0) res+=tmp;
        }
        return res;
    }
    int getmax(int a,int b){
        return a>b?a:b;
    }
    int getmin(int a,int b){
        return a>b?b:a;
    } 
};



更简洁写法：
class Solution {
public:
    int trap(vector<int>& height) {
        
        int left = 0;
        int right = height.size()-1;
        int max_left = 0;
        int max_right = 0;
        
        int result = 0;
        
        while(left<=right){
            
            if(height[left]<=height[right]){
                
                if(height[left]>=max_left) max_left = height[left];
                else result+=(max_left-height[left]);
                left++;
                
                //cout<<"left: "<<result<<endl;
            }
            else{
                
                if(height[right]>=max_right) max_right = height[right];
                else result+=(max_right-height[right]);
                right--;
                
                //cout<<"right: "<<result<<endl;
            }
        }
        
        return result;
        
    }
};
