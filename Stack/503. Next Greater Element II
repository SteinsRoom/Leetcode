题目含义：
给定一个循环数组，要求给出另一个数组，内容是对应的循环数组元素的下一个比它大的值（包括i到n与0到i两个区间），如果不存在则赋值为-1.
思路：
暴力解：
遍历循环数组中的元素，对于每个元素，分别与它之后与之前的元素比较，寻找比它大的元素。
代码：
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        vector<int> result;
        //stack<int> stk;
        int size = nums.size();
        for(int i = 0;i<size;i++){
            int key = nums[i];
            int j = 1;
            for(;j<size;j++){
                if(nums[(i+j)%size]>key){
                    result.push_back(nums[(i+j)%size]);
                    break;
                }
            }
            if(j == size )
            result.push_back(-1);
        }
        return result;
    }
};




利用栈求解：
思路：
建立一个栈，里面存入的是元素的下标。第一遍遍历整个数组，如果栈为空或者当前遍历到的元素比栈顶元素小则入栈，如果比栈顶元素大则依次弹出栈中比当前
元素小的元素，并将这些元素的下一个比它大的元素均设置为当前遍历到的这个元素。第二遍只是处理栈中剩余的元素。依然遍历整个数组，如果遍历到的元素比
栈顶的元素大说明这个值就是栈顶元素在它后面找不到但是在前面可以找到的比它大的值，将栈顶元素弹出并设置它的下一个比它大的元素为当前遍历到的元素。
如果第二次遍历时栈已为空则直接结束。
代码:
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        stack<int> stk;
        int size = nums.size();
        vector<int> result(size,-1);
        for(int i = 0;i<size;i++){
            while(!stk.empty() && nums[i] > nums[stk.top()]){
                result[stk.top()] = nums[i];
                stk.pop();
            }
            stk.push(i);
        }
        for(int i = 0;i<size;i++){
            while(!stk.empty() && nums[i] > nums[stk.top()]){
                result[stk.top()] = nums[i];
                stk.pop();
            }
        }
        return result;
    }
};
