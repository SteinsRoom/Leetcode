题目含义：
使用队列模拟实现栈的功能函数（pop,push,empty,top）
思路：用两个栈或者一个栈
代码：
2个：
class MyStack {
public:
   int flag;
   queue<int> q1;
   queue<int> q2;
public:
    /** Initialize your data structure here. */
    MyStack() {
        flag =1;
    }
    
    /** Push element x onto stack. */
    void push(int x) {
        if(flag == 1){
            q1.push(x);
        }else if(flag == 2){
            q2.push(x);
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        if(flag == 1){
            int size = q1.size();
            for(int i = 0;i<size-1;i++){
                q2.push(q1.front());
                q1.pop();
            }
            flag = 2;
            int pop_elem = q1.front();
            q1.pop();
            return pop_elem;
        }else if(flag == 2){
            int size = q2.size();
            for(int i = 0;i<size-1;i++){
                q1.push(q2.front());
                q2.pop();
            }
            flag = 1;
            int pop_elem = q2.front();
            q2.pop();
            return pop_elem;
        }
    }
    
    /** Get the top element. */
    int top() {
        if(flag == 1){
            return q1.back();
        }else if(flag == 2){
            return q2.back();
        }
    }
    
    /** Returns whether the stack is empty. */
    bool empty(){
        if(flag == 1){
            return q1.empty();
        }else if(flag == 2){
            return q2.empty();
        }
    }
    
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
 
 
 
 一个：队列的对头作为栈的开口，插入时每插入一个数全部重新插入队列一遍。
 代码：
 class MyStack {
    queue<int> q;
public:
    // push O(n), pop O(1)
    /** Initialize your data structure here. */
    MyStack() {}
    
    /** Push element x onto stack. */
    void push(int x) {
        int n = q.size();
        q.push(x);
        for (int i = 0; i < n; ++i) {
            q.push(q.front());
            q.pop();
        }
    }
    
    /** Removes the element on top of the stack and returns that element. */
    int pop() {
        int r = q.front();
        q.pop();
        return r;
    }
    
    /** Get the top element. */
    int top() {
        return q.front();
    }
    
    /** Returns whether the stack is empty. */
    bool empty() {
        return q.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * bool param_4 = obj.empty();
 */
