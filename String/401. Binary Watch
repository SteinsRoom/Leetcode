题目含义：
给定一个bit手表，小时与分钟分别用4位和6位比特数表示。现给定亮起的灯泡数目，要求返回所有可能表示的时间。其中小时前面不必带有多余的零。
思路：
遍历所有时间，看所对应得灯泡数是否与给定数目相等。这里是用了bitset，专门用于处理二进制位数。
代码：
class Solution {
public:
    vector<string> readBinaryWatch(int num) {
         vector<string> result;
        for(int h = 0;h<12;h++){
            for(int  m = 0;m<60;m++){
                if(bitset<10>(h<<6 | m).count() == num){
                    result.push_back(to_string(h)+ (m<10 ? ":0":":")+to_string(m));
                }
            }
        }
        return result;
    }
};

另一种：
class Solution {
public:
    vector<string> readBinaryWatch(int num) {
        vector<vector<int>>hour(5),min(7);
        for(int i=0;i<12;++i)
        {
            int n=bitset<4>(i).count();
            hour[n].push_back(i);
        }
        for(int i=0;i<60;++i)
        {
            int n=bitset<6>(i).count();
            min[n].push_back(i);
        }
        vector<string>res;
        for(int i=0;i<=num&&i<=4;++i)
            for(int j=0;j<hour[i].size();++j)
                for(int k=0;num-i<=6&&k<min[num-i].size();++k)
                {
                    string str=to_string(hour[i][j])+":";
                    if(min[num-i][k]<10)
                        str+="0";
                    str+=to_string(min[num-i][k]);
                    res.push_back(str);
                }
        return res;
    }
};
